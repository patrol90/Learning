<html>
<head>
<div class="header"><center>
<title>Вопросы</title>
<link href=style.css rel=stylesheet type=text/css>
СПИСОК КОНТРОЛЬНЫХ ВОПРОСОВ<br>ПО ДИСЦИПЛИНЕ<br>
"ОБЪЕКТНО-ОРИЕНТИРОВАННОЕ ПРОГРАММИРОВАНИЕ И ПРОЕКТИРОВАНИЕ"
</center></div>
</head>

<body>
<P>
<center>
Часть 1 (семестр 5)
</center>
<P>
<OL>
<LI>Понятия пакетирования, наследования и полиморфизма
<LI>Соотношение языков С и C++
<LI>Комментарии и идентификация объектов в C++
<LI>Области действия имен объектов в C++
<LI>Понятие пространства имен 
<LI>Атрибуты типа const и volatile в С и C++  
<LI>Понятие ссылочного типа и его использование
<LI>Набор и приоритет операций в C++
<LI>Операция приведения типа
<LI>Определение и переопределение функций
<LI>Умалчиваемые параметры функций
<LI>Функции с переменным числом параметров	 
<LI>Встраиваемые функции
<LI>Управление размещение объектов в памяти
<LI>Понятие класса объектов
<LI>Элементы класса и их атрибуты 
<LI>Функции-элементы класса
<LI>Статические элементы класса
<LI>Дружественные функции
<LI>Конструкторы и деструкторы
<LI>Переопределение конструкторов класса
<LI>Синтаксис вызова конструкторов класса
<LI>Конструирование объектов вложенных классов
<LI>Конструирование массивов объектов 
<LI>Конструирование статических объектов
<LI>Схема определения операций над объектами
<LI>Особенности определения операций над объектами
<LI>Способы согласования типа объектов
<LI>Опредеоение операции приведения типа
<LI>Особенности использования ссылочных типов  
<LI>Особенности операций присваивания и инициализации
<LI>Переопределение операции индексации
<LI>Переопределение операции вызова функции 
<LI>Определение и использование итераторов  
<LI>Понятие производного класса
<LI>Базовые классы и их атрибуты 
<LI>Виртуальные базовые классы 
<LI>Множественное наследование
<LI>Конструкторы и деструкторы производных классов
<LI>Конструирование объектов базовых классов
<LI>Взаимосвязь объектов производного и базовых классов
<LI>Виртуальные функции
<LI>Абстрактные классы
<LI>Классы и потоки ввода-вывода
<LI>Ввод-вывод данных базовых типов
<LI>Ввод-вывод объектов классов
<LI>Контроль исключительных ситуаций ввода-вывода
<LI>Способы определения операций над объектами
<LI>Функции-манипуляторы
<LI>Способы опеределения Функций-манипуляторов 
<LI>Связанные потоки
<LI>Файловые потоки
<LI>Строко-ориентированные потоки
<LI>Назначение и виды шаблонов в C++ 
<LI>Определение шаблонов функций
<LI>Использование шаблонов функций
<LI>Переопределение шаблонов функций
<LI>Специализация шаблонов функций
<LI>Определение шаблонов классов
<LI>Использование шаблонов классов
<LI>Специализация шаблонов классов
<LI>Характеристика шаблонов языка C++
<LI>Операционные особенности объектов класса
<LI>Особенности динамического управления памятью в C++
<LI>Использование статических элементов класса 
<LI>Статическое и динамическое связывание
<LI>Виртуальные деструкторы
<LI>Динамические особенности операторов присваивания
<LI>Схема обработки исключений в C++
<LI>Приоритет и направление операций С++
<LI>Понятие исключения
<LI>Виды и спецификация исключений
<LI>Порождение и перехват исключений
<LI>Структурное управление исключениями
<LI>Кадрированное управление исключениями
<LI>Завершающее управление исключениями
<LI>Иерархическое управление исключениями
<LI>Порождение исключений в конструкторах и деструкторах
<LI>Переопределение операции new 
<LI>Переопределение операции delete
<LI>Переопределение операции delete[]
<LI>Помещающая форма операции new
<LI>Динамическая идентификация типа
<LI>Динамическое приведение типа
<LI>Полиморфизм и динамическая идентификация типа
<LI>Статическое приведение типа
<LI>Преобразования типа с сохранением значений
<LI>Иерархическое приведение типа
<LI>Перекрестное приведение типа
<LI>Достоинства и недостатки объектных технологий
</OL>
<P>
<center>
Часть 2 (семестр 6)
</center>
<P>
<OL>
<LI>Определение и история программной инженерии 
<LI>Современное состояние программной инженерии, проблемы и пути их решения 
<LI>Понятие жизненного цикла программного обеспечения (ПО) 
<LI>Процессы жизненного цикла ПО, их деление на группы 
<LI>Состав стадий жизненного цикла ПО 
<LI>Каскадная модель жизненного цикла ПО и ее принципиальные особенности 
<LI>Преимущества и недостатки каскадной модели жизненного цикла ПО 
<LI>Спиральная модель жизненного цикла ПО и ее принципиальные особенности 
<LI>Преимущества и недостатки спиральной модели жизненного цикла ПО 
<LI>Определение технологии проектирования ПО 
<LI>Требования, предъявляемые к технологии проектирования ПО 
<LI>Графические модели ПО и их место в проектировании ПО 
<LI>Понятие архитектуры ПО 
<LI>Основные принципы объектно-ориентированного подхода 
<LI>Элементы объектной модели. Объекты и классы 
<LI>Виды связей между элементами объектной модели 
<LI>Элементы объектной модели. Компоненты, пакеты и подсистемы 
<LI>Язык UML. Определение и история создания. Состав диаграмм 
<LI>Язык UML. Общие механизмы: стереотипы, примечания, ограничения 
<LI>Моделирование бизнес-процессов. Модель Business Use-Case 
<LI>Моделирование реализации бизнес-процессов. Модель Business Object 
<LI>Понятие образца и способ его описания. Пример образца 
<LI>Бизнес-модели и модели системы. Принципиальные различия 
<LI>Определение требований к системе. Модель вариантов использования 
<LI>Переход от бизнес-модели к системным требованиям. 
<LI>Содержание процесса анализа и проектирования ПО 
<LI>Архитектурный анализ. Цели и содержание 
<LI>Анализ вариантов использования. Цели и содержание 
<LI>Образцы распределения обязанностей между классами 
<LI>Диаграммы деятельности. Область применения 
<LI>Диаграммы взаимодействия. Виды и область применения 
<LI>Диаграммы классов. Основные понятия и область применения 
<LI>Проектирование подсистем. 
<LI>Диаграммы состояний. Область применения 
<LI>Диаграммы компонентов. Область применения 
<LI>Диаграммы размещения. Область применения 
<LI>Достоинства и недостатки объектно-ориентированного подхода 
<LI>Технология Rational Unified Process. Основные принципы 
<LI>Технология Rational Unified Process. Стадии и их содержание 
<LI>Технология Rational Unified Process. Процессы и их содержание 
</OL>
</body>
</p>
</html>

 




